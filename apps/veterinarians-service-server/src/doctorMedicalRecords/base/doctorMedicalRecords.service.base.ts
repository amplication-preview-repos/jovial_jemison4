/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DoctorMedicalRecords as PrismaDoctorMedicalRecords,
} from "@prisma/client";
import { DoctorMedicalRecordsCreateInput } from "./DoctorMedicalRecordsCreateInput";
import { DoctorMedicalRecords } from "./DoctorMedicalRecords";

export class DoctorMedicalRecordsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DoctorMedicalRecordsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.doctorMedicalRecords.count(args);
  }

  async doctorMedicalRecordsItems(
    args: Prisma.DoctorMedicalRecordsFindManyArgs
  ): Promise<PrismaDoctorMedicalRecords[]> {
    return this.prisma.doctorMedicalRecords.findMany(args);
  }
  async doctorMedicalRecords(
    args: Prisma.DoctorMedicalRecordsFindUniqueArgs
  ): Promise<PrismaDoctorMedicalRecords | null> {
    return this.prisma.doctorMedicalRecords.findUnique(args);
  }
  async createDoctorMedicalRecords(
    args: Prisma.DoctorMedicalRecordsCreateArgs
  ): Promise<PrismaDoctorMedicalRecords> {
    return this.prisma.doctorMedicalRecords.create(args);
  }
  async updateDoctorMedicalRecords(
    args: Prisma.DoctorMedicalRecordsUpdateArgs
  ): Promise<PrismaDoctorMedicalRecords> {
    return this.prisma.doctorMedicalRecords.update(args);
  }
  async deleteDoctorMedicalRecords(
    args: Prisma.DoctorMedicalRecordsDeleteArgs
  ): Promise<PrismaDoctorMedicalRecords> {
    return this.prisma.doctorMedicalRecords.delete(args);
  }
  async CreateDoctorMedicalRecordsEntry(
    args: DoctorMedicalRecordsCreateInput
  ): Promise<DoctorMedicalRecords> {
    throw new Error("Not implemented");
  }
}
