/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DoctorMedicalRecordsService } from "../doctorMedicalRecords.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DoctorMedicalRecordsCreateInput } from "./DoctorMedicalRecordsCreateInput";
import { DoctorMedicalRecords } from "./DoctorMedicalRecords";
import { DoctorMedicalRecordsFindManyArgs } from "./DoctorMedicalRecordsFindManyArgs";
import { DoctorMedicalRecordsWhereUniqueInput } from "./DoctorMedicalRecordsWhereUniqueInput";
import { DoctorMedicalRecordsUpdateInput } from "./DoctorMedicalRecordsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DoctorMedicalRecordsControllerBase {
  constructor(
    protected readonly service: DoctorMedicalRecordsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DoctorMedicalRecords })
  @nestAccessControl.UseRoles({
    resource: "DoctorMedicalRecords",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDoctorMedicalRecords(
    @common.Body() data: DoctorMedicalRecordsCreateInput
  ): Promise<DoctorMedicalRecords> {
    return await this.service.createDoctorMedicalRecords({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DoctorMedicalRecords] })
  @ApiNestedQuery(DoctorMedicalRecordsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DoctorMedicalRecords",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctorMedicalRecordsItems(
    @common.Req() request: Request
  ): Promise<DoctorMedicalRecords[]> {
    const args = plainToClass(DoctorMedicalRecordsFindManyArgs, request.query);
    return this.service.doctorMedicalRecordsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DoctorMedicalRecords })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorMedicalRecords",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctorMedicalRecords(
    @common.Param() params: DoctorMedicalRecordsWhereUniqueInput
  ): Promise<DoctorMedicalRecords | null> {
    const result = await this.service.doctorMedicalRecords({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DoctorMedicalRecords })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorMedicalRecords",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDoctorMedicalRecords(
    @common.Param() params: DoctorMedicalRecordsWhereUniqueInput,
    @common.Body() data: DoctorMedicalRecordsUpdateInput
  ): Promise<DoctorMedicalRecords | null> {
    try {
      return await this.service.updateDoctorMedicalRecords({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DoctorMedicalRecords })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorMedicalRecords",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDoctorMedicalRecords(
    @common.Param() params: DoctorMedicalRecordsWhereUniqueInput
  ): Promise<DoctorMedicalRecords | null> {
    try {
      return await this.service.deleteDoctorMedicalRecords({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/create-doctor-medical-records")
  @swagger.ApiOkResponse({
    type: DoctorMedicalRecords,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateDoctorMedicalRecordsEntry(
    @common.Body()
    body: DoctorMedicalRecordsCreateInput
  ): Promise<DoctorMedicalRecords> {
    return this.service.CreateDoctorMedicalRecordsEntry(body);
  }
}
