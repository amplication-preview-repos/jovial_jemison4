/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DoctorPersonalDataService } from "../doctorPersonalData.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DoctorPersonalDataCreateInput } from "./DoctorPersonalDataCreateInput";
import { DoctorPersonalData } from "./DoctorPersonalData";
import { DoctorPersonalDataFindManyArgs } from "./DoctorPersonalDataFindManyArgs";
import { DoctorPersonalDataWhereUniqueInput } from "./DoctorPersonalDataWhereUniqueInput";
import { DoctorPersonalDataUpdateInput } from "./DoctorPersonalDataUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DoctorPersonalDataControllerBase {
  constructor(
    protected readonly service: DoctorPersonalDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DoctorPersonalData })
  @nestAccessControl.UseRoles({
    resource: "DoctorPersonalData",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDoctorPersonalData(
    @common.Body() data: DoctorPersonalDataCreateInput
  ): Promise<DoctorPersonalData> {
    return await this.service.createDoctorPersonalData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DoctorPersonalData] })
  @ApiNestedQuery(DoctorPersonalDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DoctorPersonalData",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctorPersonalDataItems(
    @common.Req() request: Request
  ): Promise<DoctorPersonalData[]> {
    const args = plainToClass(DoctorPersonalDataFindManyArgs, request.query);
    return this.service.doctorPersonalDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DoctorPersonalData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorPersonalData",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctorPersonalData(
    @common.Param() params: DoctorPersonalDataWhereUniqueInput
  ): Promise<DoctorPersonalData | null> {
    const result = await this.service.doctorPersonalData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DoctorPersonalData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorPersonalData",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDoctorPersonalData(
    @common.Param() params: DoctorPersonalDataWhereUniqueInput,
    @common.Body() data: DoctorPersonalDataUpdateInput
  ): Promise<DoctorPersonalData | null> {
    try {
      return await this.service.updateDoctorPersonalData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DoctorPersonalData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DoctorPersonalData",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDoctorPersonalData(
    @common.Param() params: DoctorPersonalDataWhereUniqueInput
  ): Promise<DoctorPersonalData | null> {
    try {
      return await this.service.deleteDoctorPersonalData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/create-doctor-personal-data")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateDoctorPersonalData(
    @common.Body()
    body: DoctorPersonalDataCreateInput
  ): Promise<string> {
    return this.service.CreateDoctorPersonalData(body);
  }

  @common.Post("/create-doctor-personal-data")
  @swagger.ApiOkResponse({
    type: DoctorPersonalData,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateDoctorPersonalDataEntry(
    @common.Body()
    body: DoctorPersonalDataCreateInput
  ): Promise<DoctorPersonalData> {
    return this.service.CreateDoctorPersonalDataEntry(body);
  }
}
