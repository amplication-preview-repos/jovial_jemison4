/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PatientTreatmentService } from "../patientTreatment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PatientTreatmentCreateInput } from "./PatientTreatmentCreateInput";
import { PatientTreatment } from "./PatientTreatment";
import { PatientTreatmentFindManyArgs } from "./PatientTreatmentFindManyArgs";
import { PatientTreatmentWhereUniqueInput } from "./PatientTreatmentWhereUniqueInput";
import { PatientTreatmentUpdateInput } from "./PatientTreatmentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PatientTreatmentControllerBase {
  constructor(
    protected readonly service: PatientTreatmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatientTreatment })
  @nestAccessControl.UseRoles({
    resource: "PatientTreatment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPatientTreatment(
    @common.Body() data: PatientTreatmentCreateInput
  ): Promise<PatientTreatment> {
    return await this.service.createPatientTreatment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PatientTreatment] })
  @ApiNestedQuery(PatientTreatmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PatientTreatment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patientTreatments(
    @common.Req() request: Request
  ): Promise<PatientTreatment[]> {
    const args = plainToClass(PatientTreatmentFindManyArgs, request.query);
    return this.service.patientTreatments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatientTreatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatientTreatment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async patientTreatment(
    @common.Param() params: PatientTreatmentWhereUniqueInput
  ): Promise<PatientTreatment | null> {
    const result = await this.service.patientTreatment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatientTreatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatientTreatment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePatientTreatment(
    @common.Param() params: PatientTreatmentWhereUniqueInput,
    @common.Body() data: PatientTreatmentUpdateInput
  ): Promise<PatientTreatment | null> {
    try {
      return await this.service.updatePatientTreatment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatientTreatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PatientTreatment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePatientTreatment(
    @common.Param() params: PatientTreatmentWhereUniqueInput
  ): Promise<PatientTreatment | null> {
    try {
      return await this.service.deletePatientTreatment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/create-patient-treatment")
  @swagger.ApiOkResponse({
    type: PatientTreatment,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePatientTreatmentEntry(
    @common.Body()
    body: PatientTreatmentCreateInput
  ): Promise<PatientTreatment> {
    return this.service.CreatePatientTreatmentEntry(body);
  }
}
